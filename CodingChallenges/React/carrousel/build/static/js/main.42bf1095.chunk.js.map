{"version":3,"sources":["Bullet.js","Carrousel.js","App.js","serviceWorker.js","index.js"],"names":["classNames","obj","res","Object","keys","filter","k","join","console","log","Bullet","props","classes","dot","selected","id","pause","react_default","a","createElement","className","onClick","Timer","_ref","_this","this","duration","callback","classCallCheck","start","setInterval","isRunning","stop","clearInterval","reset","Carrousel","state","handleKey","event","key","_this2","runToggleCarrousel","handleKeyDown","nextPhoto","prevPhoto","setState","prevState","nextId","timer","prevId","idPhoto","Math","floor","photosSize","_this3","photos","length","document","addEventListener","removeEventListener","_this4","src","alt","map","p","i","src_Bullet","Component","PHOTOS","App","src_Carrousel_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42bf1095.chunk.js","sourcesContent":["import React from 'react';\n\nconst classNames = (obj) => {\n  const res = Object.keys(obj)\n    .filter(k => !!obj[k])\n    .join(\" \")\n\n  console.log(\"res\", res);\n  return res\n}\n\nfunction Bullet(props) {\n\n  console.log(\"render bullet\")\n\n  const classes = classNames({\n    dot: true,\n    selected: props.id === props.selected,\n    pause: props.id === props.selected && props.pause\n  })\n\n  return (\n    <span className={classes} onClick={props.onClick} />\n  )\n}\n\nexport default Bullet;\n","import React, { Component } from 'react';\nimport \"./Carrousel.css\"\nimport Bullet from \"./Bullet\"\n\nclass Timer {\n  constructor({ duration, callback }) {\n    this.duration = duration\n    this.callback = callback\n  }\n\n  start = () => {\n    if (!this.id) {\n      this.id = setInterval(this.callback, this.duration)\n    }\n  }\n\n  isRunning = () => !!this.id\n\n  stop = () => {\n    if (this.id) {\n      clearInterval(this.id)\n      this.id = null\n    }\n  }\n\n  reset = () => {\n    this.stop()\n    this.start()\n  }\n\n  pause = () => {\n    this.stop()\n  }\n}\n\nclass Carrousel extends Component {\n\n  state = {\n    id: 0,\n    pause: false,\n  }\n\n  componentDidMount() {\n    if (this.props.photos) {\n      this.photosSize = this.props.photos.length\n    }\n\n    this.timer = new Timer({\n      duration: 2000,\n      callback: () => {\n        this.setState(prevState => {\n\n          return {\n            id: this.nextId(prevState)\n          }\n        })\n      }\n    })\n\n    this.runToggleCarrousel(this.timer)\n\n    document.addEventListener(\"keypress\", this.handleKey)\n    document.addEventListener(\"keydown\", this.handleKeyDown)\n  }\n\n  handleKey = (event) => {\n    console.log(\"key\", event.key)\n\n    if (event.key === \" \" || \"Spacebar\") {\n      this.runToggleCarrousel()\n    }\n  }\n\n  handleKeyDown = (event) => {\n\n    if (event.key === \"ArrowRight\") {\n      this.nextPhoto()\n    } else if (event.key === \"ArrowLeft\") {\n      this.prevPhoto()\n    }\n  }\n\n  nextPhoto = () => {\n    this.setState(prevState => ({\n      id: this.nextId(prevState)\n    }), () => !this.state.pause && this.timer.reset())\n  }\n\n  prevPhoto = () => {\n    this.setState(prevState => ({\n      id: this.prevId(prevState)\n    }), () => !this.state.pause && this.timer.reset())\n  }\n\n  idPhoto = (id) => {\n    this.setState(prevState => ({\n      id\n    }), () => !this.state.pause && this.timer.reset())\n  }\n\n  nextId = (prevState) => {\n    const quotient = Math.floor((prevState.id + 1) / this.photosSize)\n    const nextId = quotient ? 0 : prevState.id + 1\n    return nextId\n  }\n\n  prevId = (prevState) => {\n    const prevId = prevState.id ? prevState.id - 1 : this.photosSize - 1\n    return prevId\n  }\n\n  runToggleCarrousel = (timer) => {\n\n    if (this.timer.isRunning()) {\n      this.timer.pause()\n      this.setState({\n        pause: true\n      })\n      console.log(\"ArrÃªt du carrousel\")\n\n    } else {\n      this.setState({\n        pause: false\n      })\n      console.log(\"Lancement du carrousel\")\n      this.timer.start()\n    }\n\n  }\n\n  componentWillUnmount() {\n    console.log(\"Suppression du setInterval\");\n\n    this.timer.stop()\n\n    document.removeEventListener(\"keypress\", this.handleKey)\n    document.removeEventListener(\"keydown\", this.handleKeyDown)\n  }\n\n  render() {\n\n    const { photos } = this.props\n\n    if (!photos || !photos.length) {\n      return (\n        <div>\n          No photos\n        </div>\n      )\n    }\n\n    return (\n      <div>\n        <div className=\"row\">\n          <span className=\"arrow-left\" onClick={this.prevPhoto} />\n          <img className=\"nice\" src={photos[this.state.id]} alt=\"Carrousel\" />\n          <span className=\"arrow-right\" onClick={this.nextPhoto} />\n        </div>\n        <div>\n          {/*photos.map((p, i) => i === this.state.id\n            ? <span key={i} className=\"dot selected\" onClick={() => this.idPhoto(i)} />\n            : <span key={i} className=\"dot\" onClick={() => this.idPhoto(i)} />\n\n          )*/}\n          {photos.map((p, i) =>\n\n            <Bullet key={i} id={i} selected={this.state.id} pause={this.state.pause} onClick={() => this.idPhoto(i)} />\n\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carrousel;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Carrousel from \"./Carrousel\"\n\nconst PHOTOS = [\n  \"https://picsum.photos/400/600/?image=609\",\n  \"https://picsum.photos/400/600/?image=817\",\n  \"https://picsum.photos/400/600/?image=388\",\n]\n\nconst PHOTOS2 = [\n  \"https://picsum.photos/400/600/?image=109\",\n  \"https://picsum.photos/400/600/?image=217\",\n  \"https://picsum.photos/400/600/?image=488\",\n]\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Carrousel photos={PHOTOS} />\n        { /*<Carrousel photos={PHOTOS2} /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}